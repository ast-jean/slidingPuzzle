{"ast":null,"code":"var _jsxFileName = \"/home/ast-jean/sliding-puzzle/react/app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tiles, setTiles] = useState([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const handleTileClick = index => {\n    const tileValue = tiles[index];\n    if (tileValue === 0) {\n      return;\n    }\n    //todo: implement move on click\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}`);\n  };\n  function isSolvable(tiles) {\n    let inversions = 0;\n\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n\n    // For a 3×3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"3\\xD73 Sliding Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-grid\",\n      children: tiles.map((value, idx) => {\n        const isEmpty = value === 0; // 0 is empty\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `puzzle-cell ${isEmpty ? 'empty' : ''}`,\n          onClick: () => handleTileClick(idx),\n          children: isEmpty ? '' : value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"thEHQ4mHtSKg1OfkVCZbWTYL3+w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","tiles","setTiles","handleTileClick","index","tileValue","console","log","isSolvable","inversions","i","length","j","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","idx","isEmpty","onClick","_c","$RefreshReg$"],"sources":["/home/ast-jean/sliding-puzzle/react/app/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst App: React.FC = () => {\n  const [tiles, setTiles] = useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n\n  const handleTileClick = (index: number) => {\n    const tileValue = tiles[index];\n    if (tileValue === 0) { return; }\n    //todo: implement move on click\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}`);\n  };\n\n  function isSolvable(tiles: number[]): boolean {\n    let inversions = 0;\n  \n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n  \n    // For a 3×3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>3×3 Sliding Puzzle</h1>\n      <div className=\"puzzle-grid\">\n        {tiles.map((value, idx) => {\n          const isEmpty = value === 0; // 0 is empty\n          return (\n            <div\n              key={idx}\n              className={`puzzle-cell ${isEmpty ? 'empty' : ''}`}\n              onClick={() => handleTileClick(idx)}\n            >\n              {isEmpty ? '' : value}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEzE,MAAMO,eAAe,GAAIC,KAAa,IAAK;IACzC,MAAMC,SAAS,GAAGJ,KAAK,CAACG,KAAK,CAAC;IAC9B,IAAIC,SAAS,KAAK,CAAC,EAAE;MAAE;IAAQ;IAC/B;IACAC,OAAO,CAACC,GAAG,CAAC,yBAAyBH,KAAK,YAAYC,SAAS,EAAE,CAAC;EACpE,CAAC;EAED,SAASG,UAAUA,CAACP,KAAe,EAAW;IAC5C,IAAIQ,UAAU,GAAG,CAAC;;IAElB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,KAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAGX,KAAK,CAACU,MAAM,EAAEC,CAAC,EAAE,EAAE;QACzC,IAAIX,KAAK,CAACS,CAAC,CAAC,GAAG,CAAC,IAAIT,KAAK,CAACW,CAAC,CAAC,GAAG,CAAC,IAAIX,KAAK,CAACS,CAAC,CAAC,GAAGT,KAAK,CAACW,CAAC,CAAC,EAAE;UACvDH,UAAU,EAAE;QACd;MACF;IACF;;IAEA;IACA,OAAOA,UAAU,GAAG,CAAC,KAAK,CAAC;EAC7B;EAMA,oBACEX,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA;MAAAgB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BpB,OAAA;MAAKe,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzBb,KAAK,CAACkB,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;QACzB,MAAMC,OAAO,GAAGF,KAAK,KAAK,CAAC,CAAC,CAAC;QAC7B,oBACEtB,OAAA;UAEEe,SAAS,EAAE,eAAeS,OAAO,GAAG,OAAO,GAAG,EAAE,EAAG;UACnDC,OAAO,EAAEA,CAAA,KAAMpB,eAAe,CAACkB,GAAG,CAAE;UAAAP,QAAA,EAEnCQ,OAAO,GAAG,EAAE,GAAGF;QAAK,GAJhBC,GAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKL,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClB,EAAA,CAjDID,GAAa;AAAAyB,EAAA,GAAbzB,GAAa;AAmDnB,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}