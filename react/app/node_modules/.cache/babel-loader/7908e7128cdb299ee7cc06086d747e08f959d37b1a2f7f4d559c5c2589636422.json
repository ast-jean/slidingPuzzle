{"ast":null,"code":"var _jsxFileName = \"/home/ast-jean/sliding-puzzle/react/app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tiles, setTiles] = useState([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const [moveCount, setMoveCount] = useState(0);\n  const shuffleTiles = () => {\n    const mixed = mixTiles();\n    setTiles(mixed);\n    setMoveCount(0);\n  };\n  const handleTileClick = index => {\n    const tileValue = tiles[index];\n    // if (isSolved(tiles)) {\n    //   console.log(\"Puzzle already solved!\");\n    //   return;\n    // }\n\n    if (tileValue === 0) {\n      return tiles;\n    }\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}, moves: ${moveCount + 1}`);\n    let newTiles = [...tiles];\n    if (tiles[index - 3] === 0 && index - 3 >= 0) {\n      // Move up\n      [newTiles[index], newTiles[index - 3]] = [newTiles[index - 3], newTiles[index]];\n      setTiles(newTiles);\n      setMoveCount(count => count + 1);\n    } else if (tiles[index + 3] === 0 && index + 3 < tiles.length) {\n      // Move down\n      [newTiles[index], newTiles[index + 3]] = [newTiles[index + 3], newTiles[index]];\n      setTiles(newTiles);\n      setMoveCount(count => count + 1);\n    } else if (tiles[index - 1] === 0 && index % 3 !== 0) {\n      // Move left\n      [newTiles[index], newTiles[index - 1]] = [newTiles[index - 1], newTiles[index]];\n      setTiles(newTiles);\n      setMoveCount(count => count + 1);\n    } else if (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) {\n      // Move right\n      [newTiles[index], newTiles[index + 1]] = [newTiles[index + 1], newTiles[index]];\n      setTiles(newTiles);\n      setMoveCount(count => count + 1);\n    }\n    return newTiles;\n  };\n  function isSolved(tiles) {\n    for (let i = 0; i < tiles.length - 2; i++) {\n      console.log(tiles[i] + ' > ' + tiles[i + 1]);\n      if (tiles[i] > tiles[i + 1]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function isSolvable(tiles) {\n    let inversions = 0;\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n\n    // For a 3×3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n  function mixTiles() {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n\n    // Fisher-Yates Shuffle\n    for (let i = tiles.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n\n    // Check solvability for 3x3 puzzle\n    if (!isSolvable(tiles)) {\n      [tiles[0], tiles[1]] = [tiles[1], tiles[0]];\n    }\n    return tiles;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"3\\xD73 Sliding Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: shuffleTiles,\n      children: \"Shuffle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-grid\",\n      children: tiles.map((value, idx) => {\n        const isEmpty = value === 0; // 0 is empty\n        const className = `\n            puzzle-cell \n            ${isEmpty ? 'empty' : ''} \n            ${idx === 0 ? 'top-left' : ''} \n            ${idx === 2 ? 'top-right' : ''} \n            ${idx === 6 ? 'bottom-left' : ''} \n            ${idx === 8 ? 'bottom-right' : ''}\n          `.trim();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          onClick: () => {\n            const updatedTiles = handleTileClick(idx); // Get the updated tiles\n\n            if (isSolved(updatedTiles)) {\n              console.log(\"SOLVED! after \" + (moveCount + 1) + \" moves\");\n            } else {\n              console.log(\"Not SOLVED!\");\n            }\n          },\n          children: isEmpty ? '' : value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"count\",\n      children: [\"Moves: \", moveCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winMsg\",\n      children: [\"SOLVED! after \\\" + \", moveCount + 1, \" + \\\" moves\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"K/1jzB4q0baYviBilXPcDdlkprk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","tiles","setTiles","moveCount","setMoveCount","shuffleTiles","mixed","mixTiles","handleTileClick","index","tileValue","console","log","newTiles","count","length","isSolved","i","isSolvable","inversions","j","randomIndex","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","value","idx","isEmpty","trim","updatedTiles","_c","$RefreshReg$"],"sources":["/home/ast-jean/sliding-puzzle/react/app/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst App: React.FC = () => {\n  const [tiles, setTiles] = useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const [moveCount, setMoveCount] = useState<number>(0);\n  const shuffleTiles = () => {\n    const mixed = mixTiles();\n    setTiles(mixed);\n    setMoveCount(0);\n  };\n\n  const handleTileClick = (index: number): number[] => {\n    const tileValue = tiles[index];\n    // if (isSolved(tiles)) {\n    //   console.log(\"Puzzle already solved!\");\n    //   return;\n    // }\n  \n    if (tileValue === 0) { return tiles; }\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}, moves: ${moveCount + 1}`);\n    let newTiles = [...tiles];\n\n    if (tiles[index - 3] === 0 && index - 3 >= 0) {\n      // Move up\n      [newTiles[index], newTiles[index - 3]] = [newTiles[index - 3], newTiles[index]];\n      setTiles(newTiles);\n      setMoveCount((count) => count + 1);\n    } else if (tiles[index + 3] === 0 && index + 3 < tiles.length) {\n      // Move down\n      [newTiles[index], newTiles[index + 3]] = [newTiles[index + 3], newTiles[index]];\n      setTiles(newTiles);\n      setMoveCount((count) => count + 1);\n    } else if (tiles[index - 1] === 0 && index % 3 !== 0) {\n      // Move left\n      [newTiles[index], newTiles[index - 1]] = [newTiles[index - 1], newTiles[index]];\n      setTiles(newTiles);\n      setMoveCount((count) => count + 1);\n    } else if (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) {\n      // Move right\n      [newTiles[index], newTiles[index + 1]] = [newTiles[index + 1], newTiles[index]];\n      setTiles(newTiles);\n      setMoveCount((count) => count + 1);\n    }\n    return newTiles;\n  };\n\n  function isSolved(tiles: number[]): boolean {\n    for (let i = 0; i < tiles.length - 2; i++){\n      console.log(tiles[i] + ' > ' + tiles[i + 1]);\n      if (tiles[i] > tiles[i+1]){\n          return false;\n        }\n    }\n    return true;\n  }\n\n  function isSolvable(tiles: number[]): boolean {\n    let inversions = 0;\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n  \n    // For a 3×3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n\n  function mixTiles(): number[] {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n  \n    // Fisher-Yates Shuffle\n    for (let i = tiles.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n  \n    // Check solvability for 3x3 puzzle\n    if (!isSolvable(tiles)) {\n      [tiles[0], tiles[1]] = [tiles[1], tiles[0]];\n    }\n  \n    return tiles;\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>3×3 Sliding Puzzle</h1>\n      <button className=\"btn\" onClick={shuffleTiles}>Shuffle</button>\n      <div className=\"puzzle-grid\">\n        {tiles.map((value, idx) => {\n          const isEmpty = value === 0; // 0 is empty\n          const className = `\n            puzzle-cell \n            ${isEmpty ? 'empty' : ''} \n            ${idx === 0 ? 'top-left' : ''} \n            ${idx === 2 ? 'top-right' : ''} \n            ${idx === 6 ? 'bottom-left' : ''} \n            ${idx === 8 ? 'bottom-right' : ''}\n          `.trim();\n\n          return (\n            <div\n            key={idx}\n            className={className}\n            onClick={() => {\n              const updatedTiles = handleTileClick(idx); // Get the updated tiles\n        \n              if (isSolved(updatedTiles)) {\n                console.log(\"SOLVED! after \" + (moveCount + 1) + \" moves\");\n              } else {\n                console.log(\"Not SOLVED!\");\n              }\n            }}\n          >\n            {isEmpty ? '' : value}\n          </div>\n          );\n        })}\n      </div>\n      <div className=\"count\">Moves: {moveCount}</div>\n      <div className=\"winMsg\">SOLVED! after \" + {moveCount + 1} + \" moves</div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}