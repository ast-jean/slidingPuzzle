{"ast":null,"code":"var _jsxFileName = \"/home/ast-jean/sliding-puzzle/react/app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tiles, setTiles] = useState([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const [moveCount, setMoveCount] = useState(0);\n  const [winMsg, setWinMsg] = useState(\"\");\n  const [userMoves, setUserMoves] = useState([]);\n  const [isSolvedBool, setIsSolved] = useState(false);\n  const [enableGame, setEnableGame] = useState(false);\n  const [isAiSolveEnabled, setAiSolveEnabled] = useState(false);\n  const shuffleTiles = () => {\n    const mixed = mixTiles();\n    setTiles(mixed);\n    setMoveCount(0);\n    setEnableGame(true);\n    setWinMsg('');\n    setIsSolved(false);\n    setUserMoves([mixed]);\n    setAiSolveEnabled(true);\n    console.log(\"Tiles:\", mixed);\n    console.log(\"Moves:\" + moveCount, mixed);\n  };\n  const addMove = newTiles => {\n    setUserMoves(prevMoves => [...prevMoves, newTiles]);\n  };\n\n  //Debug Console prints\n  useEffect(() => {\n    console.log(\"Updated tiles:\", tiles);\n  }, [tiles]);\n  useEffect(() => {\n    console.log(\"Updated move count:\", moveCount);\n  }, [moveCount]);\n  useEffect(() => {\n    console.log(\"Updated user move:\", userMoves);\n  }, [userMoves]);\n  ///////////////////////\n\n  const handleTileClick = index => {\n    console.log(tiles);\n    if (isSolved(tiles) || enableGame === false) {\n      console.log(\"Puzzle already solved!\");\n      return tiles;\n    }\n    const tileValue = tiles[index];\n    if (tileValue === 0) {\n      return tiles;\n    }\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}, moves: ${moveCount + 1}`);\n    let newTiles = [...tiles];\n    if (tiles[index - 3] === 0 && index - 3 >= 0 || tiles[index + 3] === 0 && index + 3 >= 0 || tiles[index + 1] === 0 && index + 1 >= 0 || tiles[index - 1] === 0 && index - 1 >= 0) {\n      setAiSolveEnabled(false);\n      if (tiles[index - 3] === 0 && index - 3 >= 0) {\n        // Move up\n        [newTiles[index], newTiles[index - 3]] = [newTiles[index - 3], newTiles[index]];\n      } else if (tiles[index + 3] === 0 && index + 3 < tiles.length) {\n        // Move down\n        [newTiles[index], newTiles[index + 3]] = [newTiles[index + 3], newTiles[index]];\n        setTiles(newTiles);\n        setMoveCount(count => count + 1);\n        addMove(newTiles);\n      } else if (tiles[index - 1] === 0 && index % 3 !== 0) {\n        // Move left\n        [newTiles[index], newTiles[index - 1]] = [newTiles[index - 1], newTiles[index]];\n        setTiles(newTiles);\n        setMoveCount(count => count + 1);\n        addMove(newTiles);\n      } else if (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) {\n        // Move right\n        [newTiles[index], newTiles[index + 1]] = [newTiles[index + 1], newTiles[index]];\n        setTiles(newTiles);\n        setMoveCount(count => count + 1);\n        addMove(newTiles);\n      }\n      setTiles(newTiles);\n      setMoveCount(count => count + 1);\n      addMove(newTiles);\n    }\n    return newTiles;\n  };\n  function isSolved(tiles) {\n    if (moveCount === 0) return false;\n    for (let i = 0; i < tiles.length - 2; i++) {\n      if (tiles[i] > tiles[i + 1]) {\n        setIsSolved(false);\n        return false;\n      }\n    }\n    setIsSolved(true);\n    setAiSolveEnabled(false);\n    return true;\n  }\n  function isSolvable(tiles) {\n    let inversions = 0;\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n\n    // For a 3Ã—3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n  function mixTiles() {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n\n    // Fisher-Yates Shuffle\n    for (let i = tiles.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n\n    // Check solvability for 3x3 puzzle\n    if (!isSolvable(tiles)) {\n      [tiles[0], tiles[1]] = [tiles[1], tiles[0]];\n    }\n    return tiles;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `pyro ${isSolvedBool ? '' : 'hidden'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"before\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"after\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"3\\xD73 Sliding Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: shuffleTiles,\n        children: \"Shuffle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => console.log(\"not implemented\"),\n        disabled: !isAiSolveEnabled,\n        children: \"Show AI solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-grid\",\n      children: tiles.map((value, idx) => {\n        const isEmpty = value === 0; // 0 is empty\n        //Add a classname for rounded corners\n        const className = `\n            puzzle-cell \n            ${isEmpty ? 'empty' : ''} \n            ${idx === 0 ? 'top-left' : ''} \n            ${idx === 2 ? 'top-right' : ''} \n            ${idx === 6 ? 'bottom-left' : ''} \n            ${idx === 8 ? 'bottom-right' : ''}\n          `.trim();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          onClick: () => {\n            const updatedTiles = handleTileClick(idx); // Get the updated tiles\n\n            if (isSolved(updatedTiles)) {\n              setWinMsg(\"SOLVED! after \" + (moveCount + 1) + \" moves!\");\n            } else {\n              console.log(\"Not SOLVED!\");\n            }\n          },\n          children: isEmpty ? '' : value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"count\",\n      children: [\"Moves: \", moveCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winMsg\",\n      children: winMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"796t7FpIx/c3Rn6Zd6g10ZPw62M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","tiles","setTiles","moveCount","setMoveCount","winMsg","setWinMsg","userMoves","setUserMoves","isSolvedBool","setIsSolved","enableGame","setEnableGame","isAiSolveEnabled","setAiSolveEnabled","shuffleTiles","mixed","mixTiles","console","log","addMove","newTiles","prevMoves","handleTileClick","index","isSolved","tileValue","length","count","i","isSolvable","inversions","j","randomIndex","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","value","idx","isEmpty","trim","updatedTiles","_c","$RefreshReg$"],"sources":["/home/ast-jean/sliding-puzzle/react/app/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\n\nconst App: React.FC = () => {\n  const [tiles, setTiles] = useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const [moveCount, setMoveCount] = useState<number>(0);\n  const [winMsg, setWinMsg] = useState<string>(\"\");\n  const [userMoves, setUserMoves] = useState<number[][]>([]);\n  const [isSolvedBool, setIsSolved] = useState(false);\n  const [enableGame, setEnableGame] = useState(false);\n  const [isAiSolveEnabled, setAiSolveEnabled] = useState(false)\n  const shuffleTiles = () => {\n    const mixed = mixTiles();\n    setTiles(mixed);\n    setMoveCount(0);\n    setEnableGame(true);\n    setWinMsg('');\n    setIsSolved(false);\n    setUserMoves([mixed]);\n    setAiSolveEnabled(true);\n    console.log(\"Tiles:\", mixed)\n    console.log(\"Moves:\"+ moveCount, mixed);\n  };\n\n  const addMove = (newTiles: number[]) => {\n    setUserMoves((prevMoves) => [...prevMoves, newTiles]);\n};\n\n//Debug Console prints\n  useEffect(() => {\n    console.log(\"Updated tiles:\", tiles);\n  }, [tiles]);\n\n    useEffect(() => {\n    console.log(\"Updated move count:\", moveCount);\n  }, [moveCount]);\n\n  useEffect(() => {\n    console.log(\"Updated user move:\", userMoves);\n  }, [userMoves]);\n///////////////////////\n\n  const handleTileClick = (index: number): number[] => {\n    console.log(tiles);\n\n    if (isSolved(tiles) || enableGame === false) {\n      console.log(\"Puzzle already solved!\");\n      return tiles;\n    }\n  \n    const tileValue = tiles[index];\n    if (tileValue === 0) { return tiles; }\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}, moves: ${moveCount + 1}`);\n    let newTiles = [...tiles];\n    if ((tiles[index - 3] === 0 && index - 3 >= 0) || \n        (tiles[index + 3] === 0 && index + 3 >= 0) ||\n        (tiles[index + 1] === 0 && index + 1 >= 0) ||\n        (tiles[index - 1] === 0 && index - 1 >= 0)) {\n          setAiSolveEnabled(false);\n          if (tiles[index - 3] === 0 && index - 3 >= 0) {\n            // Move up\n            [newTiles[index], newTiles[index - 3]] = [newTiles[index - 3], newTiles[index]];\n\n          } else if (tiles[index + 3] === 0 && index + 3 < tiles.length) {\n            // Move down\n            [newTiles[index], newTiles[index + 3]] = [newTiles[index + 3], newTiles[index]];\n            setTiles(newTiles);\n            setMoveCount((count) => count + 1);\n            addMove(newTiles);\n          } else if (tiles[index - 1] === 0 && index % 3 !== 0) {\n            // Move left\n            [newTiles[index], newTiles[index - 1]] = [newTiles[index - 1], newTiles[index]];\n            setTiles(newTiles);\n            setMoveCount((count) => count + 1);\n            addMove(newTiles);\n          } else if (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) {\n            // Move right\n            [newTiles[index], newTiles[index + 1]] = [newTiles[index + 1], newTiles[index]];\n            setTiles(newTiles);\n            setMoveCount((count) => count + 1);\n            addMove(newTiles);\n          }\n          setTiles(newTiles);\n          setMoveCount((count) => count + 1);\n          addMove(newTiles);\n        }\n\n    return newTiles;\n  };\n\n  function isSolved(tiles: number[]): boolean {\n    if (moveCount === 0)\n      return false;\n    for (let i = 0; i < tiles.length - 2; i++){\n      if (tiles[i] > tiles[i+1]){\n          setIsSolved(false);\n          return false;\n        }\n    }\n    setIsSolved(true);\n    setAiSolveEnabled(false);\n    return true;\n  }\n\n  function isSolvable(tiles: number[]): boolean {\n    let inversions = 0;\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n  \n    // For a 3Ã—3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n\n  function mixTiles(): number[] {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n  \n    // Fisher-Yates Shuffle\n    for (let i = tiles.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n  \n    // Check solvability for 3x3 puzzle\n    if (!isSolvable(tiles)) {\n      [tiles[0], tiles[1]] = [tiles[1], tiles[0]];\n    }\n    return tiles;\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className={`pyro ${isSolvedBool ? '' : 'hidden'}`}>\n        <div className=\"before\"></div>\n        <div className=\"after\"></div>\n      </div>\n      <h1>3Ã—3 Sliding Puzzle</h1>\n      <div className='buttons'>\n      <button className=\"btn\" onClick={shuffleTiles}>Shuffle</button>\n      <button className=\"btn\" onClick={()=>console.log(\"not implemented\")} disabled={!isAiSolveEnabled}>Show AI solve</button>\n      </div>\n      <div className=\"puzzle-grid\">\n        {tiles.map((value, idx) => {\n          const isEmpty = value === 0; // 0 is empty\n          //Add a classname for rounded corners\n          const className = `\n            puzzle-cell \n            ${isEmpty ? 'empty' : ''} \n            ${idx === 0 ? 'top-left' : ''} \n            ${idx === 2 ? 'top-right' : ''} \n            ${idx === 6 ? 'bottom-left' : ''} \n            ${idx === 8 ? 'bottom-right' : ''}\n          `.trim();\n\n          return (\n            <div\n            key={idx}\n            className={className}\n            onClick={() => {\n              const updatedTiles = handleTileClick(idx); // Get the updated tiles\n        \n              if (isSolved(updatedTiles)) {\n                setWinMsg(\"SOLVED! after \" + (moveCount + 1) + \" moves!\")\n              } else {\n                console.log(\"Not SOLVED!\");\n              }\n            }}\n          >\n            {isEmpty ? '' : value}\n          </div>\n          );\n        })}\n      </div>\n      <div className=\"count\">Moves: {moveCount}</div>\n      <div className=\"winMsg\">{winMsg}</div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}