{"ast":null,"code":"var _jsxFileName = \"/home/ast-jean/sliding-puzzle/react/app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tiles, setTiles] = useState([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const [moveCount, setMoveCount] = useState(0);\n  const [winMsg, setWinMsg] = useState(\"\");\n  const [userMoves, setUserMoves] = useState([]);\n  const [isSolvedBool, setIsSolved] = useState(false);\n  const [enableGame, setEnableGame] = useState(false);\n  const [isAiSolveEnabled, setAiSolveEnabled] = useState(false);\n  const [isAiSearching, setAiSearching] = useState(false);\n  const shuffleTiles = () => {\n    const mixed = mixTiles();\n    setTiles(mixed);\n    setMoveCount(0);\n    setEnableGame(true);\n    setWinMsg('');\n    setIsSolved(false);\n    setUserMoves([mixed]);\n    fetchAiSolution(mixed);\n    console.log(\"Tiles:\", mixed);\n    console.log(\"Moves:\" + moveCount, mixed);\n  };\n  const addMove = newTiles => {\n    setUserMoves(prevMoves => [...prevMoves, newTiles]);\n  };\n  function fetchAiSolution() {\n    setAiSolveEnabled(true);\n    setAiSearching(true);\n  }\n\n  //Debug Console prints\n  useEffect(() => {\n    console.log(\"Updated tiles:\", tiles);\n  }, [tiles]);\n  useEffect(() => {\n    console.log(\"Updated move count:\", moveCount);\n  }, [moveCount]);\n  useEffect(() => {\n    console.log(\"Updated user move:\", userMoves);\n  }, [userMoves]);\n\n  // Parse the puzzle from the URL hash\n  useEffect(() => {\n    const hash = window.location.hash.slice(1); // Remove the '#' symbol\n    if (hash) {\n      let newTiles = hash.split('').map(Number);\n      if (isSolvable(newTiles)) {\n        const customTiles = hash.split('').map(Number);\n        setTiles(customTiles);\n        setMoveCount(0);\n        setEnableGame(true);\n        setWinMsg('');\n        setIsSolved(false);\n        setUserMoves([customTiles]);\n        setAiSolveEnabled(true);\n      } else {\n        alert('Invalid puzzle in URL. Using default puzzle.');\n      }\n    } else {\n      setTiles([1, 2, 3, 4, 5, 6, 7, 8, 0]); // Default puzzle\n    }\n  }, []);\n\n  ///////////////////////\n\n  const handleTileClick = index => {\n    console.log(tiles);\n    if (isSolved(tiles) || enableGame === false) {\n      console.log(\"Puzzle already solved!\");\n      return tiles;\n    }\n    const tileValue = tiles[index];\n    if (tileValue === 0) {\n      return tiles;\n    }\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}, moves: ${moveCount + 1}`);\n    let newTiles = [...tiles];\n    if (tiles[index - 3] === 0 && index - 3 >= 0 ||\n    // Move up\n    tiles[index + 3] === 0 && index + 3 < tiles.length ||\n    // Move down\n    tiles[index - 1] === 0 && index % 3 !== 0 ||\n    // Move left\n    tiles[index + 1] === 0 && (index + 1) % 3 !== 0 // Move right\n    ) {\n      setAiSolveEnabled(false);\n      if (tiles[index - 3] === 0 && index - 3 >= 0) {\n        // Move up\n        [newTiles[index], newTiles[index - 3]] = [newTiles[index - 3], newTiles[index]];\n      } else if (tiles[index + 3] === 0 && index + 3 < tiles.length) {\n        // Move down\n        [newTiles[index], newTiles[index + 3]] = [newTiles[index + 3], newTiles[index]];\n      } else if (tiles[index - 1] === 0 && index % 3 !== 0) {\n        // Move left\n        [newTiles[index], newTiles[index - 1]] = [newTiles[index - 1], newTiles[index]];\n      } else if (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) {\n        // Move right\n        [newTiles[index], newTiles[index + 1]] = [newTiles[index + 1], newTiles[index]];\n      }\n      setTiles(newTiles);\n      setMoveCount(count => count + 1);\n      addMove(newTiles);\n    }\n    return newTiles;\n  };\n  function isSolved(tiles) {\n    if (moveCount === 0) return false;\n    for (let i = 0; i < tiles.length - 2; i++) {\n      if (tiles[i] > tiles[i + 1]) {\n        setIsSolved(false);\n        return false;\n      }\n    }\n    setIsSolved(true);\n    setAiSolveEnabled(false);\n    return true;\n  }\n  function isSolvable(tiles) {\n    let inversions = 0;\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n\n    // For a 3Ã—3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n  function mixTiles() {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n\n    // Fisher-Yates Shuffle\n    for (let i = tiles.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n\n    // Check solvability for 3x3 puzzle\n    if (!isSolvable(tiles)) {\n      [tiles[0], tiles[1]] = [tiles[1], tiles[0]];\n    }\n    return tiles;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `pyro ${isSolvedBool ? '' : 'hidden'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"before\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"after\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"3\\xD73 Sliding Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: shuffleTiles,\n        children: \"Shuffle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: fetchAiSolution,\n        disabled: !isAiSolveEnabled,\n        children: [`${isAiSearching ? 'Show AI solve' : 'Searching Solution'}`, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${isAiSearching ? '' : 'hidden'}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `loader`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loader-element\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-grid\",\n      children: tiles.map((value, idx) => {\n        const isEmpty = value === 0; // 0 is empty\n        //Add a classname for rounded corners\n        const className = `\n            puzzle-cell \n            ${isEmpty ? 'empty' : ''} \n            ${idx === 0 ? 'top-left' : ''} \n            ${idx === 2 ? 'top-right' : ''} \n            ${idx === 6 ? 'bottom-left' : ''} \n            ${idx === 8 ? 'bottom-right' : ''}\n          `.trim();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          onClick: () => {\n            const updatedTiles = handleTileClick(idx); // Get the updated tiles\n            if (isSolved(updatedTiles)) {\n              setWinMsg(\"SOLVED! after \" + (moveCount + 1) + \" moves!\");\n            } else {\n              console.log(\"Not SOLVED!\");\n            }\n          },\n          children: isEmpty ? '' : value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"count\",\n      children: [\"Moves: \", moveCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winMsg\",\n      children: winMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KaYRWceH7R87WRQRMl9Q7e/CTKw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","tiles","setTiles","moveCount","setMoveCount","winMsg","setWinMsg","userMoves","setUserMoves","isSolvedBool","setIsSolved","enableGame","setEnableGame","isAiSolveEnabled","setAiSolveEnabled","isAiSearching","setAiSearching","shuffleTiles","mixed","mixTiles","fetchAiSolution","console","log","addMove","newTiles","prevMoves","hash","window","location","slice","split","map","Number","isSolvable","customTiles","alert","handleTileClick","index","isSolved","tileValue","length","count","i","inversions","j","randomIndex","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","value","idx","isEmpty","trim","updatedTiles","_c","$RefreshReg$"],"sources":["/home/ast-jean/sliding-puzzle/react/app/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\n\nconst App: React.FC = () => {\n  const [tiles, setTiles] = useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const [moveCount, setMoveCount] = useState<number>(0);\n  const [winMsg, setWinMsg] = useState<string>(\"\");\n  const [userMoves, setUserMoves] = useState<number[][]>([]);\n  const [isSolvedBool, setIsSolved] = useState(false);\n  const [enableGame, setEnableGame] = useState(false);\n  const [isAiSolveEnabled, setAiSolveEnabled] = useState(false);\n  const [isAiSearching, setAiSearching] = useState(false);\n  const shuffleTiles = () => {\n    const mixed = mixTiles();\n    setTiles(mixed);\n    setMoveCount(0);\n    setEnableGame(true);\n    setWinMsg('');\n    setIsSolved(false);\n    setUserMoves([mixed]);\n    fetchAiSolution(mixed);\n    console.log(\"Tiles:\", mixed)\n    console.log(\"Moves:\"+ moveCount, mixed);\n  };\n\n  const addMove = (newTiles: number[]) => {\n    setUserMoves((prevMoves) => [...prevMoves, newTiles]);\n};\n\nfunction fetchAiSolution(){\n  setAiSolveEnabled(true);\n  setAiSearching(true);\n}\n\n\n//Debug Console prints\n  useEffect(() => {\n    console.log(\"Updated tiles:\", tiles);\n  }, [tiles]);\n\n    useEffect(() => {\n    console.log(\"Updated move count:\", moveCount);\n  }, [moveCount]);\n\n  useEffect(() => {\n    console.log(\"Updated user move:\", userMoves);\n  }, [userMoves]);\n\n  // Parse the puzzle from the URL hash\n  useEffect(() => {\n    const hash = window.location.hash.slice(1); // Remove the '#' symbol\n    if (hash) {\n\n      let newTiles = hash.split('').map(Number)\n      if (isSolvable(newTiles)) {\n        const customTiles = hash.split('').map(Number);\n        setTiles(customTiles);\n        setMoveCount(0);\n        setEnableGame(true);\n        setWinMsg('');\n        setIsSolved(false);\n        setUserMoves([customTiles]);\n        setAiSolveEnabled(true);\n      } else {\n        alert('Invalid puzzle in URL. Using default puzzle.');\n      }\n    } else {\n      setTiles([1, 2, 3, 4, 5, 6, 7, 8, 0]); // Default puzzle\n    }\n  }, []);\n\n///////////////////////\n\n  const handleTileClick = (index: number): number[] => {\n    console.log(tiles);\n\n    if (isSolved(tiles) || enableGame === false) {\n      console.log(\"Puzzle already solved!\");\n      return tiles;\n    }\n  \n    const tileValue = tiles[index];\n    if (tileValue === 0) { return tiles; }\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}, moves: ${moveCount + 1}`);\n    let newTiles = [...tiles];\n    if (\n      (tiles[index - 3] === 0 && index - 3 >= 0) || // Move up\n      (tiles[index + 3] === 0 && index + 3 < tiles.length) || // Move down\n      (tiles[index - 1] === 0 && index % 3 !== 0) || // Move left\n      (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) // Move right\n      ) {\n          setAiSolveEnabled(false);\n          if (tiles[index - 3] === 0 && index - 3 >= 0) {\n            // Move up\n            [newTiles[index], newTiles[index - 3]] = [newTiles[index - 3], newTiles[index]];\n          } else if (tiles[index + 3] === 0 && index + 3 < tiles.length) {\n            // Move down\n            [newTiles[index], newTiles[index + 3]] = [newTiles[index + 3], newTiles[index]];\n          } else if (tiles[index - 1] === 0 && index % 3 !== 0) {\n            // Move left\n            [newTiles[index], newTiles[index - 1]] = [newTiles[index - 1], newTiles[index]];\n          } else if (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) {\n            // Move right\n            [newTiles[index], newTiles[index + 1]] = [newTiles[index + 1], newTiles[index]];\n          }\n          setTiles(newTiles);\n          setMoveCount((count) => count + 1);\n          addMove(newTiles);\n        }\n    return newTiles;\n  };\n\n  function isSolved(tiles: number[]): boolean {\n    if (moveCount === 0)\n      return false;\n    for (let i = 0; i < tiles.length - 2; i++){\n      if (tiles[i] > tiles[i+1]){\n          setIsSolved(false);\n          return false;\n        }\n    }\n    setIsSolved(true);\n    setAiSolveEnabled(false);\n    return true;\n  }\n\n  function isSolvable(tiles: number[]): boolean {\n    let inversions = 0;\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n  \n    // For a 3Ã—3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n\n  function mixTiles(): number[] {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n  \n    // Fisher-Yates Shuffle\n    for (let i = tiles.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n  \n    // Check solvability for 3x3 puzzle\n    if (!isSolvable(tiles)) {\n      [tiles[0], tiles[1]] = [tiles[1], tiles[0]];\n    }\n    return tiles;\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className={`pyro ${isSolvedBool ? '' : 'hidden'}`}>\n        <div className=\"before\"></div>\n        <div className=\"after\"></div>\n      </div>\n      <h1>3Ã—3 Sliding Puzzle</h1>\n      <div className='buttons'>\n      <button className=\"btn\" onClick={shuffleTiles}>Shuffle</button>\n      <button className=\"btn\" onClick={fetchAiSolution} disabled={!isAiSolveEnabled}>{`${isAiSearching ? 'Show AI solve' : 'Searching Solution'}`}\n      <div className={`${isAiSearching ? '' : 'hidden'}`}>\n      <span className={`loader`}>\n        <div className=\"loader-element\"></div>\n      </span>\n      </div>\n      </button>\n      </div>\n      <div className=\"puzzle-grid\">\n        {tiles.map((value, idx) => {\n          const isEmpty = value === 0; // 0 is empty\n          //Add a classname for rounded corners\n          const className = `\n            puzzle-cell \n            ${isEmpty ? 'empty' : ''} \n            ${idx === 0 ? 'top-left' : ''} \n            ${idx === 2 ? 'top-right' : ''} \n            ${idx === 6 ? 'bottom-left' : ''} \n            ${idx === 8 ? 'bottom-right' : ''}\n          `.trim();\n\n          return (\n            <div\n            key={idx}\n            className={className}\n            onClick={() => {\n              const updatedTiles = handleTileClick(idx); // Get the updated tiles\n              if (isSolved(updatedTiles)) {\n                setWinMsg(\"SOLVED! after \" + (moveCount + 1) + \" moves!\")\n              } else {\n                console.log(\"Not SOLVED!\");\n              }\n            }}\n          >\n            {isEmpty ? '' : value}\n          </div>\n          );\n        })}\n      </div>\n      <div className=\"count\">Moves: {moveCount}</div>\n      <div className=\"winMsg\">{winMsg}</div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}