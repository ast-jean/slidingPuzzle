{"ast":null,"code":"var _jsxFileName = \"/home/ast-jean/sliding-puzzle/react/app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tiles, setTiles] = useState([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const [moveCount, setMoveCount] = useState(0);\n  const shuffleTiles = () => {\n    const mixed = mixTiles();\n    setTiles(mixed);\n    setMoveCount(0);\n  };\n  const swapTiles = (tile1, tile2) => {\n    const newTiles = [...tiles];\n    [newTiles[tile1], newTiles[tile2]] = [newTiles[tile2], newTiles[tile1]];\n    setTiles(newTiles);\n  };\n  const handleTileClick = index => {\n    const tileValue = tiles[index];\n    setMoveCount(count => count++);\n    if (tileValue === 0) {\n      return;\n    }\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}`);\n    if (tiles[index - 3] === 0 && index - 3 >= 0) {\n      // Move up\n      swapTiles(index, index - 3);\n    } else if (tiles[index + 3] === 0 && index + 3 < tiles.length) {\n      // Move down\n      swapTiles(index, index + 3);\n    } else if (tiles[index - 1] === 0 && index % 3 !== 0) {\n      // Move left (check that the tile is not at the left edge)\n      swapTiles(index, index - 1);\n    } else if (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) {\n      // Move right (check that the tile is not at the right edge)\n      swapTiles(index, index + 1);\n    }\n  };\n  function isSolvable(tiles) {\n    let inversions = 0;\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n\n    // For a 3×3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n  function mixTiles() {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n\n    // Fisher-Yates Shuffle\n    for (let i = tiles.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n\n    // Check solvability for 3x3 puzzle\n    if (!isSolvable(tiles)) {\n      [tiles[0], tiles[1]] = [tiles[1], tiles[0]];\n    }\n    return tiles;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"3\\xD73 Sliding Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: shuffleTiles,\n      children: \"Shuffle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-grid\",\n      children: tiles.map((value, idx) => {\n        const isEmpty = value === 0; // 0 is empty\n        const className = `\n            puzzle-cell \n            ${isEmpty ? 'empty' : ''} \n            ${idx === 0 ? 'top-left' : ''} \n            ${idx === 2 ? 'top-right' : ''} \n            ${idx === 6 ? 'bottom-left' : ''} \n            ${idx === 8 ? 'bottom-right' : ''}\n          `.trim();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          onClick: () => handleTileClick(idx),\n          children: isEmpty ? '' : value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), \"\\\\\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"count\",\n      children: moveCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"K/1jzB4q0baYviBilXPcDdlkprk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","tiles","setTiles","moveCount","setMoveCount","shuffleTiles","mixed","mixTiles","swapTiles","tile1","tile2","newTiles","handleTileClick","index","tileValue","count","console","log","length","isSolvable","inversions","i","j","randomIndex","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","value","idx","isEmpty","trim","_c","$RefreshReg$"],"sources":["/home/ast-jean/sliding-puzzle/react/app/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst App: React.FC = () => {\n  const [tiles, setTiles] = useState<number[]>([1, 2, 3, 4, 5, 6, 7, 8, 0]);\n  const [moveCount, setMoveCount] = useState<number>(0);\n  const shuffleTiles = () => {\n    const mixed = mixTiles();\n    setTiles(mixed);\n    setMoveCount(0);\n  };\n\n  const swapTiles = (tile1: number, tile2: number) => {\n    const newTiles = [...tiles];\n    [newTiles[tile1], newTiles[tile2]] = [newTiles[tile2], newTiles[tile1]];\n    setTiles(newTiles);\n  };\n\n  const handleTileClick = (index: number) => {\n    const tileValue = tiles[index];\n    setMoveCount((count) => count++);\n    if (tileValue === 0) { return; }\n    console.log(`Clicked tile at index ${index}, value: ${tileValue}`);\n    if (tiles[index - 3] === 0 && index - 3 >= 0) {\n      // Move up\n      swapTiles(index, index - 3);\n    } else if (tiles[index + 3] === 0 && index + 3 < tiles.length) {\n      // Move down\n      swapTiles(index, index + 3);\n    } else if (tiles[index - 1] === 0 && index % 3 !== 0) {\n      // Move left (check that the tile is not at the left edge)\n      swapTiles(index, index - 1);\n    } else if (tiles[index + 1] === 0 && (index + 1) % 3 !== 0) {\n      // Move right (check that the tile is not at the right edge)\n      swapTiles(index, index + 1);\n    }\n  };\n\n  function isSolvable(tiles: number[]): boolean {\n    let inversions = 0;\n    // Count inversions (ignoring 0)\n    for (let i = 0; i < tiles.length; i++) {\n      for (let j = i + 1; j < tiles.length; j++) {\n        if (tiles[i] > 0 && tiles[j] > 0 && tiles[i] > tiles[j]) {\n          inversions++;\n        }\n      }\n    }\n  \n    // For a 3×3 puzzle, solvability depends on inversions being even\n    return inversions % 2 === 0;\n  }\n\n  function mixTiles(): number[] {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n  \n    // Fisher-Yates Shuffle\n    for (let i = tiles.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n  \n    // Check solvability for 3x3 puzzle\n    if (!isSolvable(tiles)) {\n      [tiles[0], tiles[1]] = [tiles[1], tiles[0]];\n    }\n  \n    return tiles;\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>3×3 Sliding Puzzle</h1>\n      <button className=\"btn\" onClick={shuffleTiles}>Shuffle</button>\n      <div className=\"puzzle-grid\">\n        {tiles.map((value, idx) => {\n          const isEmpty = value === 0; // 0 is empty\n          const className = `\n            puzzle-cell \n            ${isEmpty ? 'empty' : ''} \n            ${idx === 0 ? 'top-left' : ''} \n            ${idx === 2 ? 'top-right' : ''} \n            ${idx === 6 ? 'bottom-left' : ''} \n            ${idx === 8 ? 'bottom-right' : ''}\n          `.trim();\n\n          return (\n            <div\n              key={idx}\n              className={className}\n              onClick={() => handleTileClick(idx)}\n            >\n              {isEmpty ? '' : value}\n            </div>\n          );\n        })}\n      </div>\\\n      <div className='count'>{moveCount}</div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACzE,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAS,CAAC,CAAC;EACrD,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,KAAK,GAAGC,QAAQ,CAAC,CAAC;IACxBL,QAAQ,CAACI,KAAK,CAAC;IACfF,YAAY,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,MAAMI,SAAS,GAAGA,CAACC,KAAa,EAAEC,KAAa,KAAK;IAClD,MAAMC,QAAQ,GAAG,CAAC,GAAGV,KAAK,CAAC;IAC3B,CAACU,QAAQ,CAACF,KAAK,CAAC,EAAEE,QAAQ,CAACD,KAAK,CAAC,CAAC,GAAG,CAACC,QAAQ,CAACD,KAAK,CAAC,EAAEC,QAAQ,CAACF,KAAK,CAAC,CAAC;IACvEP,QAAQ,CAACS,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMC,eAAe,GAAIC,KAAa,IAAK;IACzC,MAAMC,SAAS,GAAGb,KAAK,CAACY,KAAK,CAAC;IAC9BT,YAAY,CAAEW,KAAK,IAAKA,KAAK,EAAE,CAAC;IAChC,IAAID,SAAS,KAAK,CAAC,EAAE;MAAE;IAAQ;IAC/BE,OAAO,CAACC,GAAG,CAAC,yBAAyBJ,KAAK,YAAYC,SAAS,EAAE,CAAC;IAClE,IAAIb,KAAK,CAACY,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;MAC5C;MACAL,SAAS,CAACK,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;IAC7B,CAAC,MAAM,IAAIZ,KAAK,CAACY,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,GAAGZ,KAAK,CAACiB,MAAM,EAAE;MAC7D;MACAV,SAAS,CAACK,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;IAC7B,CAAC,MAAM,IAAIZ,KAAK,CAACY,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;MACpD;MACAL,SAAS,CAACK,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;IAC7B,CAAC,MAAM,IAAIZ,KAAK,CAACY,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAACA,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MAC1D;MACAL,SAAS,CAACK,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;IAC7B;EACF,CAAC;EAED,SAASM,UAAUA,CAAClB,KAAe,EAAW;IAC5C,IAAImB,UAAU,GAAG,CAAC;IAClB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,KAAK,CAACiB,MAAM,EAAEG,CAAC,EAAE,EAAE;MACrC,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrB,KAAK,CAACiB,MAAM,EAAEI,CAAC,EAAE,EAAE;QACzC,IAAIrB,KAAK,CAACoB,CAAC,CAAC,GAAG,CAAC,IAAIpB,KAAK,CAACqB,CAAC,CAAC,GAAG,CAAC,IAAIrB,KAAK,CAACoB,CAAC,CAAC,GAAGpB,KAAK,CAACqB,CAAC,CAAC,EAAE;UACvDF,UAAU,EAAE;QACd;MACF;IACF;;IAEA;IACA,OAAOA,UAAU,GAAG,CAAC,KAAK,CAAC;EAC7B;EAEA,SAASb,QAAQA,CAAA,EAAa;IAC5B,MAAMN,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEzC;IACA,KAAK,IAAIoB,CAAC,GAAGpB,KAAK,CAACiB,MAAM,GAAG,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MACvD,CAACpB,KAAK,CAACoB,CAAC,CAAC,EAAEpB,KAAK,CAACsB,WAAW,CAAC,CAAC,GAAG,CAACtB,KAAK,CAACsB,WAAW,CAAC,EAAEtB,KAAK,CAACoB,CAAC,CAAC,CAAC;IACjE;;IAEA;IACA,IAAI,CAACF,UAAU,CAAClB,KAAK,CAAC,EAAE;MACtB,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7C;IAEA,OAAOA,KAAK;EACd;EAIA,oBACEH,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB9B,OAAA;MAAA8B,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BlC,OAAA;MAAQ6B,SAAS,EAAC,KAAK;MAACM,OAAO,EAAE5B,YAAa;MAAAuB,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/DlC,OAAA;MAAK6B,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzB3B,KAAK,CAACiC,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;QACzB,MAAMC,OAAO,GAAGF,KAAK,KAAK,CAAC,CAAC,CAAC;QAC7B,MAAMR,SAAS,GAAG;AAC5B;AACA,cAAcU,OAAO,GAAG,OAAO,GAAG,EAAE;AACpC,cAAcD,GAAG,KAAK,CAAC,GAAG,UAAU,GAAG,EAAE;AACzC,cAAcA,GAAG,KAAK,CAAC,GAAG,WAAW,GAAG,EAAE;AAC1C,cAAcA,GAAG,KAAK,CAAC,GAAG,aAAa,GAAG,EAAE;AAC5C,cAAcA,GAAG,KAAK,CAAC,GAAG,cAAc,GAAG,EAAE;AAC7C,WAAW,CAACE,IAAI,CAAC,CAAC;QAER,oBACExC,OAAA;UAEE6B,SAAS,EAAEA,SAAU;UACrBM,OAAO,EAAEA,CAAA,KAAMrB,eAAe,CAACwB,GAAG,CAAE;UAAAR,QAAA,EAEnCS,OAAO,GAAG,EAAE,GAAGF;QAAK,GAJhBC,GAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKL,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,MACN,eAAAlC,OAAA;MAAK6B,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEzB;IAAS;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAAChC,EAAA,CAnGID,GAAa;AAAAwC,EAAA,GAAbxC,GAAa;AAqGnB,eAAeA,GAAG;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}